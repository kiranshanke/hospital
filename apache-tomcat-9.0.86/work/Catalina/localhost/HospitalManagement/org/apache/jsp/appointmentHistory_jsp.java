/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2025-04-11 10:06:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;

public final class appointmentHistory_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    // Optional: Show only logged-in userâ€™s appointments
    // String loggedInPatient = (String) session.getAttribute("patientName");

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Appointment History</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            font-family: Arial;\n");
      out.write("            padding: 40px;\n");
      out.write("            background-color: #f5f5f5;\n");
      out.write("        }\n");
      out.write("        h2 {\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        form {\n");
      out.write("            max-width: 600px;\n");
      out.write("            margin: 20px auto;\n");
      out.write("            display: flex;\n");
      out.write("            gap: 10px;\n");
      out.write("        }\n");
      out.write("        input, select, button {\n");
      out.write("            padding: 10px;\n");
      out.write("            font-size: 14px;\n");
      out.write("        }\n");
      out.write("        table {\n");
      out.write("            width: 100%;\n");
      out.write("            margin-top: 20px;\n");
      out.write("            border-collapse: collapse;\n");
      out.write("            background: white;\n");
      out.write("        }\n");
      out.write("        th, td {\n");
      out.write("            padding: 14px;\n");
      out.write("            border-bottom: 1px solid #ccc;\n");
      out.write("            text-align: left;\n");
      out.write("        }\n");
      out.write("        th {\n");
      out.write("            background-color: #6c5ce7;\n");
      out.write("            color: white;\n");
      out.write("        }\n");
      out.write("        tr:hover {\n");
      out.write("            background-color: #f1f2f6;\n");
      out.write("        }\n");
      out.write("        a.button {\n");
      out.write("            padding: 6px 12px;\n");
      out.write("            background-color: #d63031;\n");
      out.write("            color: white;\n");
      out.write("            text-decoration: none;\n");
      out.write("            border-radius: 4px;\n");
      out.write("        }\n");
      out.write("        a.button:hover {\n");
      out.write("            background-color: #e17055;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<h2>Appointment History</h2>\n");
      out.write("\n");
      out.write("<!-- Filter Form -->\n");
      out.write("<form method=\"get\">\n");
      out.write("    <select name=\"doctorId\">\n");
      out.write("        <option value=\"\">-- All Doctors --</option>\n");
      out.write("        ");

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital_db", "root", "root");
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT id, first_name, last_name FROM doctor");
                while (rs.next()) {
                    int id = rs.getInt("id");
                    String name = rs.getString("first_name") + " " + rs.getString("last_name");
        
      out.write("\n");
      out.write("            <option value=\"");
      out.print( id );
      out.write('"');
      out.write(' ');
      out.print( request.getParameter("doctorId") != null && request.getParameter("doctorId").equals(String.valueOf(id)) ? "selected" : "" );
      out.write('>');
      out.print( name );
      out.write("</option>\n");
      out.write("        ");

                }
                rs.close(); stmt.close(); conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        
      out.write("\n");
      out.write("    </select>\n");
      out.write("\n");
      out.write("    <input type=\"date\" name=\"date\" value=\"");
      out.print( request.getParameter("date") != null ? request.getParameter("date") : "" );
      out.write("\">\n");
      out.write("    <button type=\"submit\">Filter</button>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<!-- Appointment Table -->\n");
      out.write("<table>\n");
      out.write("    <tr>\n");
      out.write("        <th>Patient</th>\n");
      out.write("        <th>Doctor</th>\n");
      out.write("        <th>Date</th>\n");
      out.write("        <th>Time</th>\n");
      out.write("        <th>Reason</th>\n");
      out.write("        <th>Action</th>\n");
      out.write("    </tr>\n");
      out.write("\n");
      out.write("    ");

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String filterDoctor = request.getParameter("doctorId");
        String filterDate = request.getParameter("date");

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital_db", "root", "root");

            String sql = "SELECT a.appointment_id, a.patient_name, d.first_name, d.last_name, a.appointment_date, a.appointment_time, a.reason " +
                         "FROM appointment a JOIN doctor d ON a.doctor_id = d.id WHERE 1=1";

            if (filterDoctor != null && !filterDoctor.isEmpty()) {
                sql += " AND a.doctor_id = " + filterDoctor;
            }
            if (filterDate != null && !filterDate.isEmpty()) {
                sql += " AND a.appointment_date = '" + filterDate + "'";
            }

            sql += " ORDER BY a.appointment_date DESC, a.appointment_time DESC";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("appointment_id");
                String patient = rs.getString("patient_name");
                String doctor = rs.getString("first_name") + " " + rs.getString("last_name");
                String date = rs.getString("appointment_date");
                String time = rs.getString("appointment_time").substring(0, 5);
                String reason = rs.getString("reason");
    
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td>");
      out.print( patient );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( doctor );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( date );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( time );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( (reason == null || reason.trim().isEmpty()) ? "N/A" : reason );
      out.write("</td>\n");
      out.write("            <td>\n");
      out.write("                <a class=\"button\" href=\"deleteAppointment.jsp?id=");
      out.print( id );
      out.write("\" onclick=\"return confirm('Are you sure you want to delete this appointment?')\">Delete</a>\n");
      out.write("                <!-- You can also add: <a href=\"editAppointment.jsp?id=");
      out.print( id );
      out.write("\">Edit</a> -->\n");
      out.write("            </td>\n");
      out.write("        </tr>\n");
      out.write("    ");

            }
        } catch (Exception e) {
            out.println("<tr><td colspan='6' style='color:red;'>Error: " + e.getMessage() + "</td></tr>");
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException ignored) {}
        }
    
      out.write("\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
